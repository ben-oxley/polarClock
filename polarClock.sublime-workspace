{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"time",
				"timestamp"
			],
			[
				"TIDE",
				"TIDE_ARRAY_SIZE-1"
			],
			[
				"heigh",
				"heightArr"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"init",
				"initialTime"
			],
			[
				"ini",
				"initialTime"
			],
			[
				"tide",
				"TIDE_ARRAY_SIZE"
			],
			[
				"APP",
				"APP_LOG_LEVEL_INFO"
			],
			[
				"WEA",
				"WEATHER_POSN_KEY"
			],
			[
				"send",
				"sendBytes"
			],
			[
				"a",
				"atoi"
			],
			[
				"tem",
				"tempHeight"
			],
			[
				"un",
				"uint32"
			],
			[
				"add",
				"addTime"
			],
			[
				"temp",
				"tempHeight"
			],
			[
				"wea",
				"weatherResult"
			],
			[
				"curr",
				"currAngle"
			],
			[
				"int",
				"int32_t"
			],
			[
				"second",
				"second_angle"
			],
			[
				"line",
				"line_layer"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/Users/ben/pebble-dev/PebbleSDK-2.0-BETA4/Examples/watchfaces/simplicity/src/simplicity.c",
			"settings":
			{
				"buffer_size": 2602,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"pebble.h\"\n#include <time.h>\n\nWindow *window;\nTextLayer *text_date_layer;\nTextLayer *text_time_layer;\nLayer *line_layer;\n\nGPoint get_gpoint(int degrees,int radius){\n  double x, y;\n  GPoint a;\n  x = radius*sin_lookup((degrees/360)*TRIG_MAX_ANGLE);\n  x /= TRIG_MAX_RATIO;\n  y = radius*cos_lookup((degrees/360)*TRIG_MAX_ANGLE);\n  y /= TRIG_MAX_RATIO;\n  a = GPoint((int)x+50,(int)y+50);\n  return a;\n}\n\nvoid line_layer_update_callback(Layer *layer, GContext* ctx) {\n  struct tm * timenow;\n  time_t timestamp = time(NULL);\n  timenow = localtime(&timestamp);\n\n  graphics_context_set_fill_color(ctx, GColorWhite);\n  \n  //draw hours\n  int i;\n  for (i = 0; i < 24; i++) {\n    if(timenow->tm_hour != i) {\n      graphics_fill_circle(ctx,get_gpoint(i*15,30),5);\n      \n    }\n  }\n\n}\n\nvoid handle_minute_tick(struct tm *tick_time, TimeUnits units_changed) {\n  // Need to be static because they're used by the system later.\n  static char time_text[] = \"00:00\";\n  static char date_text[] = \"Xxxxxxxxx 00\";\n\n  char *time_format;\n\n\n  // TODO: Only update the date when it's changed.\n  strftime(date_text, sizeof(date_text), \"%B %e\", tick_time);\n  text_layer_set_text(text_date_layer, date_text);\n\n\n  if (clock_is_24h_style()) {\n    time_format = \"%R\";\n  } else {\n    time_format = \"%I:%M\";\n  }\n\n  strftime(time_text, sizeof(time_text), time_format, tick_time);\n\n  // Kludge to handle lack of non-padded hour format string\n  // for twelve hour clock.\n  if (!clock_is_24h_style() && (time_text[0] == '0')) {\n    memmove(time_text, &time_text[1], sizeof(time_text) - 1);\n  }\n\n  text_layer_set_text(text_time_layer, time_text);\n}\n\nvoid handle_deinit(void) {\n  tick_timer_service_unsubscribe();\n}\n\nvoid handle_init(void) {\n  window = window_create();\n  window_stack_push(window, true /* Animated */);\n  window_set_background_color(window, GColorBlack);\n\n  Layer *window_layer = window_get_root_layer(window);\n\n  text_date_layer = text_layer_create(GRect(8, 68, 144-8, 168-68));\n  text_layer_set_text_color(text_date_layer, GColorWhite);\n  text_layer_set_background_color(text_date_layer, GColorClear);\n  text_layer_set_font(text_date_layer, fonts_load_custom_font(resource_get_handle(RESOURCE_ID_FONT_ROBOTO_CONDENSED_21)));\n  layer_add_child(window_layer, text_layer_get_layer(text_date_layer));\n\n  text_time_layer = text_layer_create(GRect(7, 92, 144-7, 168-92));\n  text_layer_set_text_color(text_time_layer, GColorWhite);\n  text_layer_set_background_color(text_time_layer, GColorClear);\n  text_layer_set_font(text_time_layer, fonts_load_custom_font(resource_get_handle(RESOURCE_ID_FONT_ROBOTO_BOLD_SUBSET_49)));\n  layer_add_child(window_layer, text_layer_get_layer(text_time_layer));\n\n  GRect line_frame = GRect(0, 0, 144, 168);\n  line_layer = layer_create(line_frame);\n  layer_set_update_proc(line_layer, line_layer_update_callback);\n  layer_add_child(window_layer, line_layer);\n\n  tick_timer_service_subscribe(MINUTE_UNIT, handle_minute_tick);\n  // TODO: Update display here to avoid blank display on launch?\n}\n\n\nint main(void) {\n  handle_init();\n\n  app_event_loop();\n  \n  handle_deinit();\n}\n",
			"file": "src/polarClock.c",
			"file_size": 3075,
			"file_write_time": 1389050410000000,
			"settings":
			{
				"buffer_size": 3082,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 287.0,
		"selected_items":
		[
			[
				"build",
				"Set Syntax: NAnt Build File"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/ben/pebble-dev/PebbleSDK-2.0-BETA1/Pebble/watches/tide/src/simplicity.c",
		"/Users/ben/pebble-dev/PebbleSDK-2.0-BETA1/Pebble/watches/tide_watch/src/tide_watch.c",
		"/Users/ben/pebble-dev/PebbleSDK-2.0-BETA4/Examples/pebblekit-js/weather/src/weather.c",
		"/Users/ben/pebble-dev/PebbleSDK-2.0-BETA4/Examples/pebblekit-js/quotes/appinfo.json",
		"/Users/ben/pebble-dev/PebbleSDK-2.0-BETA4/Examples/watchfaces/big_time/appinfo.json",
		"/Users/ben/pebble-dev/PebbleSDK-2.0-BETA4/Examples/watchfaces/simplicity/src/simplicity.c",
		"/Users/ben/pebble-dev/PebbleSDK-2.0-BETA4/Examples/pebblekit-js/weather/src/js/pebble-js-app.js",
		"/Users/ben/TideWatchJS/src/js/pebble-js-app._js_old.js",
		"/Users/ben/WeatherWatch/pythontest/readjson.py",
		"/Users/ben/pebble-dev/PebbleSDK-2.0-BETA1/Examples/watchfaces/tide_watch/src/tide_watch.c",
		"/Users/ben/Desktop/testa/test.c",
		"/Users/ben/Desktop/Presentation Notes"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"50",
			"initial_val",
			"send_cmd",
			"64",
			"WEATHER_TEMPERATURE_KEY",
			"WEATHER_ICON_KEY",
			"int"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"LINE_CENTER",
			"WEATHER_TIDE_KEY",
			"WEATHER_TIME_KEY",
			"long"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/ben/pebble-dev/PebbleSDK-2.0-BETA4/Examples/watchfaces/simplicity/src/simplicity.c",
					"settings":
					{
						"buffer_size": 2602,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								2602
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 901.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/polarClock.c",
					"settings":
					{
						"buffer_size": 3082,
						"regions":
						{
						},
						"selection":
						[
							[
								764,
								764
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 281.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 302.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/Users/ben/pebble-dev/PebbleSDK-2.0-BETA4/Examples/pebblekit-js/TideWatchJS/TideWatchJS2.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
